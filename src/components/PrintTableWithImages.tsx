"use client";

import React, { useState } from "react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface PDFUserData {
  profile?: string;
  fullName: string;
  birthday: string;
  email: string;
  mobile: string;
  address: string;
  userType: string;
  status: string;
  lastLogin: string;
  tricycleNo?: string;
}

interface PDFTableWithImagesProps {
  data: PDFUserData[];
  fileName?: string;
  title?: string;
  buttonLabel?: string;
  generatedByFname?: string;
  generatedByLname?: string;
}

const PDFTableWithImages: React.FC<PDFTableWithImagesProps> = ({
  data,
  fileName = "report_with_images.pdf",
  title = "User Report",
  buttonLabel = "Export PDF",
  generatedByFname = "",
  generatedByLname = "",
}) => {
  const [isLoading, setIsLoading] = useState(false);

  const convertImageToBase64 = (url: string): Promise<string | null> => {
    return new Promise((resolve) => {
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.onload = () => {
        const canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext("2d");
        if (ctx) {
          ctx.drawImage(img, 0, 0);
          const dataURL = canvas.toDataURL("image/png");
          resolve(dataURL);
        } else {
          resolve(null);
        }
      };
      img.onerror = () => resolve(null);
      img.src = url;
    });
  };

  const generatePDF = async () => {
    setIsLoading(true);
    const doc = new jsPDF("landscape");
    doc.setFontSize(18);
    doc.text(title, 14, 20);

    doc.setFontSize(11);
    doc.text(`Generated by: ${generatedByFname} ${generatedByLname}`, 14, 30);
    doc.text(`Date: ${new Date().toLocaleString()}`, 14, 38);

    const headers = [
      "Profile",
      "Full Name",
      "Birthday",
      "Email",
      "Mobile",
      "Address",
      "User Type",
      "Status",
      "Last Login",
      "Tricycle No.",
    ];

    // Store base64 images per row index
    const images: (string | null)[] = [];

    const body = [];

    for (const user of data) {
      const image =
        user.profile && typeof user.profile === "string"
          ? await convertImageToBase64(user.profile)
          : null;

      images.push(image);

      body.push([
        "", // empty string for image column
        user.fullName,
        user.birthday,
        user.email,
        user.mobile,
        user.address,
        user.userType,
        user.status,
        user.lastLogin,
        user.tricycleNo ?? "â€”",
      ]);
    }

    autoTable(doc, {
      head: [headers],
      body,
      startY: 45,
      theme: "grid",
      styles: {
        fontSize: 8,
        cellPadding: 3,
      },
      didDrawCell: (data) => {
        const { column, row, cell } = data;

        if (column.index === 0) {
          // Profile column
          const image = images[row.index];
          if (image) {
            // Fit the image inside the cell with padding
            const imgWidth = 12;
            const imgHeight = 12;
            const x = cell.x + (cell.width - imgWidth) / 2; // center horizontally
            const y = cell.y + (cell.height - imgHeight) / 2; // center vertically

            doc.addImage(image, "PNG", x, y, imgWidth, imgHeight);
          }
        }
      },
    });

    doc.save(fileName);
    setIsLoading(false);
  };

  return (
    <div className="mb-4">
      <button
        onClick={generatePDF}
        disabled={isLoading}
        className={`mt-4 px-4 py-2 flex items-center justify-center gap-2 ${
          isLoading
            ? "bg-gray-400 cursor-not-allowed"
            : "bg-[#3d5554] hover:bg-[#2c3f3e]"
        } text-white rounded-md transition-all`}
      >
        {isLoading && (
          <svg
            className="animate-spin h-5 w-5 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8v4l3-3-3-3v4a8 8 0 00-8 8h4z"
            ></path>
          </svg>
        )}
        {isLoading ? "Generating..." : buttonLabel}
      </button>
    </div>
  );
};

export default PDFTableWithImages;
